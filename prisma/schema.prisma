generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl  = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  extensions = [uuid_ossp(map: "uuid-ossp")]
}

model Course {
  id        String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  code      String?
  name      String?
  createdAt DateTime? @map("created_at") @db.Timestamp(6)
  disciplines DisciplineCourse[]

  @@map("course")
}

model Department {
  id        String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  code      String?
  name      String?
  createdAt DateTime? @map("created_at") @db.Timestamp(6)
  disciplines Discipline[]

  @@map("department")
}

model EquivalencyGroup {
  id        String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  createdAt DateTime? @map("created_at") @db.Timestamp(6)
  disciplines Discipline[]

  @@map("equivalency_group")
}

// Modify the Discipline model
model Discipline {
  id        String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  code      String?
  name      String?
  description String?
  departmentId String? @map("department_id") @db.Uuid
  createdAt DateTime? @map("created_at") @db.Timestamp(6)
  equivalencyGroupId String? @map("equivalency_group_id") @db.Uuid
  department Department? @relation(fields: [departmentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  classes DisciplineClass[]
  courses DisciplineCourse[]
  prerequisites Prerequisite[] @relation("PrerequisiteDiscipline")
  equivalencyGroup EquivalencyGroup? @relation(fields: [equivalencyGroupId], references: [id])

  @@map("discipline")
}

model DisciplineClass {
  id        String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  classNumber String? @map("class_number")
  disciplineId String? @map("discipline_id") @db.Uuid
  semester String?
  professor String?
  createdAt DateTime? @map("created_at") @db.Timestamp(6)
  discipline Discipline? @relation(fields: [disciplineId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  schedules DisciplineClassSchedule[]

  @@map("discipline_class")
}

model DisciplineClassSchedule {
  id                 String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  disciplineClassId  String?   @map("discipline_class_id") @db.Uuid
  dayOfWeek          String?   @map("day_of_week")
  startTime          DateTime? @map("start_time") @db.Time(6)
  endTime            DateTime? @map("end_time") @db.Time(6)
  classType          String?   @map("class_type")  // Add this line
  createdAt          DateTime? @map("created_at") @db.Timestamp(6)
  disciplineClass    DisciplineClass? @relation(fields: [disciplineClassId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("discipline_class_schedule")
}

model DisciplineCourse {
  id        String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  disciplineId String? @map("discipline_id") @db.Uuid
  courseId String? @map("course_id") @db.Uuid
  mandatory Boolean?
  period Int?
  createdAt DateTime? @map("created_at") @db.Timestamp(6)
  course Course? @relation(fields: [courseId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  discipline Discipline? @relation(fields: [disciplineId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  prerequisites Prerequisite[]

  @@map("discipline_course")
}

model Prerequisite {
  id        String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  disciplineCourseId String? @map("discipline_course_id") @db.Uuid
  prerequisiteDisciplineId String? @map("prerequisite_discipline_id") @db.Uuid
  createdAt DateTime? @map("created_at") @db.Timestamp(6)
  disciplineCourse DisciplineCourse? @relation(fields: [disciplineCourseId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  prerequisiteDiscipline Discipline? @relation("PrerequisiteDiscipline", fields: [prerequisiteDisciplineId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("prerequisite")
}

model Account {
  id                 String  @id
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}